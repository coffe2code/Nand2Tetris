// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    And(a=instruction[15], b=instruction[4], out=DLoad);

    DRegister(in=w1, load=DLoad, out=Doutput);

    Mux16(a=instruction, b=w1, sel=instruction[15], out=Ainput);

    Not(in=instruction[15], out=w7);
    Or(a=w7, b=instruction[5], out=ALoad);

    ARegister(in=Ainput, load=ALoad, out= Aoutput);

    Mux16(a=Aoutput, b=inM, sel=instruction[12], out=AoMoutput);

    ALU(x=Doutput, y=AoMoutput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=w1, zr=zr, ng=ng);

    Or16(a=w1, b[0]=false, out=outM);

    And(a=instruction[15], b=instruction[3], out=writeM);


    Or16(a=Aoutput, b[0]=false, out[0..14]=addressM);


    //JGT
    Or(a=zr, b=ng, out=temp1);
    Not(in=temp1, out=temp2);

    Not(in=instruction[2], out=temp3);
    Not(in=instruction[1], out=temp4);
    And(a=temp3, b=temp4, out=temp5);
    And(a=temp5, b=instruction[0], out=temp6);

    And(a=temp6, b=temp2, out=temp7);
    And(a=temp7, b=instruction[15], out=JGT);

    //JEQ
    Not(in=instruction[2], out=temp8);
    Not(in=instruction[0], out=temp9);
    And(a=temp8, b=temp9, out=temp10);
    And(a=temp10, b=instruction[1], out=temp11);

    And(a=temp11, b=zr, out=t1);
    And(a=t1, b=instruction[15], out=JEQ);

    //JGE
    Not(in=instruction[2], out=temp12);
    And(a=temp12, b=instruction[1], out=temp13);
    And(a=temp13, b=instruction[0], out=temp14);

    Not(in=ng, out=ng1);
    And(a=temp14, b=ng1, out=t2);
    And(a=t2, b=instruction[15], out=JGE);

    //JLT
    Not(in=instruction[1], out=temp15);
    Not(in=instruction[0], out=temp16);
    And(a=temp15, b=temp16, out=temp17);
    And(a=temp17, b=instruction[2], out=temp18);


    And(a=ng, b=temp18, out=t3);
    And(a=t3, b=instruction[15], out=JLT);

    //JNE
    Not(in=instruction[1], out=temp19);
    And(a=temp19, b=instruction[2], out=temp20);
    And(a=temp20, b=instruction[0], out=temp21);

    Not(in=zr, out=zr1);
    And(a=temp21, b=zr1, out=t4);
    And(a=t4, b=instruction[15], out=JNE);


    //JLE
    Not(in=instruction[0], out=temp22);
    And(a=temp22, b=instruction[1], out=temp23);
    And(a=temp23, b=instruction[2], out=temp24);

    Or(a=ng, b=zr, out=temp25);
    And(a=temp24, b=temp25, out=t5);
    And(a=t5, b=instruction[15], out=JLE);


    //JMP
    And(a=instruction[0], b=instruction[1], out=temp26);
    And(a=temp26, b=instruction[2], out=t6);
    And(a=t6, b=instruction[15], out=JMP);

    Or(a=JGT, b=JEQ, out=temp27);
    Or(a=temp27, b=JGE, out=temp28);
    Or(a=temp28, b=JLT, out=temp29);
    Or(a=temp29, b=JNE, out=temp30);
    Or(a=temp30, b=JLE, out=temp31);
    Or(a=temp31, b=JMP, out=loadbit);

    PC(in=Aoutput, load=loadbit, reset=reset, inc=true, out[0..14]=pc);
}

